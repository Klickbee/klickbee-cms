// This is your Prisma schema file,
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// === Auth Models ===

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String
  emailVerified Boolean
  image         String?
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  accounts      Account[]
  createdAt     DateTime  @default(now())

  // Relations
  UserSettings UserSettings[]
  collectionItems CollectionItem[]

  role       String?   @default("user")
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime? @updatedAt

  @@map("verification")
}

// === Settings Models ===

model Settings {
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSettings {
  key    String
  value  String
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@id([key, userId])
}

// === Builder Models ===

model GlobalSettings {
  id         String   @id @default(cuid())
  typography Json
  colors     Json
  spacing    Json
  logos      Json[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// === Contact Models ===

model Contact {
  id         Int      @id @default(autoincrement())
  email      String?
  number     String?
  name       String?
  submitDate DateTime @default(now())
  content    Json?
  createdAt  DateTime @default(now())

  @@map("contact")
}

// === page Models ===

model Page {
  id        Int      @id @default(autoincrement())
  title     String
  slug      String   @unique
  /// [PageContentMetaType]
  content   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  parentId  Int?
  parent    Page?    @relation("PageHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children  Page[]   @relation("PageHierarchy")

  // SEO fields
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?

  // Additional fields
  isPublished Boolean   @default(false)
  publishedAt DateTime?

  @@map("page")
}

// === Collection Models ===
/**
 * Only for dev purposes, will be enhanced later
 */

model Collection {
  id        Int      @id @default(autoincrement())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  items     CollectionItem[]
  templates CollectionTemplate[]

  @@map("collection")
}

model CollectionItem {
  id              Int        @id @default(autoincrement())
  collectionId    Int
  collection      Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  title           String
  slug            String     @unique
  content         Json
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  
  // Author relation
  authorId        String
  author          User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  // SEO fields
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?

  // Additional fields
  isPublished Boolean   @default(false)
  publishedAt DateTime?

  @@map("collection_item")
}

model CollectionTemplate {
  id           Int        @id @default(autoincrement())
  name         String
  content      Json
  collectionId Int
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}
